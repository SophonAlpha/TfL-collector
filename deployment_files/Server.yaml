AWSTemplateFormatVersion: "2010-09-09"

Parameters:

  EC2ImageID:
    Type: AWS::EC2::Image::Id
    Default: ami-06fd8a495a537da8b
    Description: >-
      Ubuntu Server 20.04 LTS (HVM), SSD Volume Type
  EC2InstanceTypeID:
    Type: String
    Default: t3.small
    Description: >-
      2 vCPUs; x86_64; 2,048 MiB memory
  SSHKeyName:
    Type: String
    Default: collector-server
  DeploymentS3Bucket:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /Collector/deployment/S3bucket
  DeploymentS3Prefix:
    Type: String
    Default: deployment/
  BackupBucketName:
    Type: String

Resources:

  CollectorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Collector server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000 # Grafana
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8086 # InfluxDB
          ToPort: 8086
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22 # SSH
          ToPort: 22
          CidrIp: 0.0.0.0/0

  CollectorServer:
    Type: AWS::EC2::Instance
    DependsOn:
      - DeploymentProfile
      - DeploymentRole
      - DeploymentPolicy
    Properties:
      InstanceType:
        Ref: EC2InstanceTypeID
      ImageId:
        Ref: EC2ImageID
      HibernationOptions:
        Configured: true
      KeyName:
        Ref: SSHKeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: 20
            Encrypted: true
      SecurityGroupIds:
        - !Ref CollectorSecurityGroup
      IamInstanceProfile: !Ref DeploymentProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # log UserData script output, source: https://alestic.com/2010/12/ec2-user-data-output/
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          echo -----
          echo ----- start UserData script -----
          echo -----
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install awscli -y
          echo -----
          echo ----- call install.sh script -----
          echo -----
          aws s3 cp s3://${DeploymentS3Bucket}/deployment/install.sh - | bash
          echo -----
          echo ----- end UserData script -----
          echo -----

  DeploymentProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref DeploymentRole

  DeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: [
                'sts:AssumeRole'
            ]
      Path: /

  DeploymentPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DeploymentPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: [
                "s3:ListBucket",
                "s3:GetObject",
                "s3:PutObject",
                "ssm:GetParameters",
            ]
            Resource:
              - !Sub "arn:aws:s3:::${DeploymentS3Bucket}/*"
              - !Sub "arn:aws:s3:::${DeploymentS3Bucket}"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/Collector/*"
          - Effect: Allow
            Action: [
                "s3:GetObject",
                "s3:PutObject",
                "s3:ListBucket",
            ]
            Resource:
              - !Sub
                - "arn:aws:s3:::${Name}/*"
                - Name:
                    Ref: BackupBucketName
              - !Sub
                - "arn:aws:s3:::${Name}"
                - Name:
                    Ref: BackupBucketName
      Roles:
        - !Ref DeploymentRole

Outputs:
  CollectorServerIP4DNS:
    Value: !GetAtt CollectorServer.PublicDnsName
