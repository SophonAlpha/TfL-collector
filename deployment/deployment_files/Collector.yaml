
# Todos:
#   - parametrize
#   - in DeploymentBucket.yaml: write deployment S3 bucket to SSM parameter store
#   - read deployment S3 bucket from SSM parameter store
#   - add backup to S3

AWSTemplateFormatVersion: "2010-09-09"

Parameters:

  EC2ImageID:
    Type: AWS::EC2::Image::Id
    Default: ami-06fd8a495a537da8b
    Description: >-
      Ubuntu Server 20.04 LTS (HVM), SSD Volume Type
  EC2InstanceTypeID:
    Type: String
    Default: t3.small
    Description: >-
      2 vCPUs; x86_64; 2,048 MiB memory
  SSHKeyName:
    Type: String
    Default: collector-server
  DeploymentS3Bucket:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /Collector/deployment/S3bucket
  DeploymentS3Prefix:
    Type: String
    Default: deployment/

Resources:

  CollectorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Collector server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000 # Grafana
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8086 # InfluxDB
          ToPort: 8086
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22 # SSH
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: application
          Value: Collector

  CollectorServer:
    Type: AWS::EC2::Instance
    DependsOn:
      - DeploymentProfile
      - DeploymentRole
      - DeploymentPolicy
    Properties:
      InstanceType:
        Ref: EC2InstanceTypeID
      ImageId:
        Ref: EC2ImageID
      KeyName:
        Ref: SSHKeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: 20
            Encrypted: true
      SecurityGroupIds:
        - !Ref CollectorSecurityGroup
      IamInstanceProfile: !Ref DeploymentProfile
      UserData:
        !Base64 |
        #!/bin/bash
        # log UserData script output, source: https://alestic.com/2010/12/ec2-user-data-output/
        exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
        echo ----- start UserData script -----
        sudo apt-get update
        sudo apt-get upgrade -y
        sudo apt-get install awscli -y
        echo ----- call install.sh script -----
        aws s3 cp s3://collector-deployment-bucket-m1mgfnap/deployment/install.sh - | bash
        echo ----- end UserData script -----
      Tags:
        - Key: application
          Value: Collector

  DeploymentProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref DeploymentRole

  DeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: [
                'sts:AssumeRole'
            ]
      Path: /
      Tags:
        - Key: application
          Value: Collector

  DeploymentPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DeploymentPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: [
                "s3:List*",
                "s3:GetObject",
                "ssm:GetParameters"
            ]
            Resource: [
                "arn:aws:s3:::collector-deployment-bucket-m1mgfnap",
                "arn:aws:s3:::*/*",
                "arn:aws:ssm:eu-west-1:060337561279:parameter/Collector/parameters",
            ]
      Roles:
        - !Ref DeploymentRole

  CollectorLambda:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${DeploymentS3Bucket}.s3-eu-west-1.amazonaws.com/${DeploymentS3Prefix}CollectorLambda.yaml"
      TimeoutInMinutes: 60
      Tags:
        - Key: application
          Value: Collector

Outputs:
  CollectorServerIP4DNS:
    Value: !GetAtt CollectorServer.PublicDnsName
