
# Todos:
#   add tags
#   for Lambda function configure CloudWatch log retention to 3 months

AWSTemplateFormatVersion: "2010-09-09"

Resources:

  CollectorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Collector server
#      GroupName: CollectorSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000 # Grafana
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8086 # InfluxDB
          ToPort: 8086
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22 # SSH
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: application
          Value: Collector

  CollectorServer:
    Type: AWS::EC2::Instance
    DependsOn:
      - DeploymentProfile
      - DeploymentRole
      - DeploymentPolicy
    Properties:
      InstanceType: t3.small
      ImageId: ami-06fd8a495a537da8b # Ubuntu Server 20.04 LTS (HVM), SSD Volume Type
      KeyName: collector-server
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: '20'
            Encrypted: 'true'
      SecurityGroupIds:
        - !Ref CollectorSecurityGroup
      IamInstanceProfile: !Ref DeploymentProfile
      UserData:
        !Base64 |
        #!/bin/bash
        # log UserData script output, source: https://alestic.com/2010/12/ec2-user-data-output/
        exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
        echo ----- start UserData script -----
        sudo apt-get update
        sudo apt-get upgrade -y
        sudo apt-get install awscli -y
        echo ----- call install.sh script -----
        aws s3 cp s3://collector-deployment-bucket-m1mgfnap/deployment/install.sh - | bash
        echo ----- end UserData script -----
      Tags:
        - Key: application
          Value: Collector

  DeploymentProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref DeploymentRole

  DeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Tags:
        - Key: application
          Value: Collector

  DeploymentPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DeploymentPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: [
                's3:List*',
                's3:GetObject',
                'ssm:GetParameters'
            ]
            Resource: [
                'arn:aws:s3:::collector-deployment-bucket-m1mgfnap',
                'arn:aws:s3:::*/*',
                'arn:aws:ssm:eu-west-1:060337561279:parameter/Collector/InfluxDB_Users',
            ]
      Roles:
        - !Ref DeploymentRole

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: 'ParameterStoreAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetParameter*'
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/Collector/parameters*'
      Tags:
        - Key: application
          Value: Collector

  CollectorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: collector-deployment-bucket-m1mgfnap
        S3Key: deployment/lambda_collector.zip
      Description: collector lambda function
      FunctionName: collector
      Handler: collector.main
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 60
      Layers:
        - !Ref InfluxDBLayer
        - !Ref PyYamlLayer
      Environment:
        Variables:
          SSMParameterStorePath: '/Collector/parameters'
      Tags:
        - Key: application
          Value: Collector

  InfluxDBLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket: collector-deployment-bucket-m1mgfnap
        S3Key: deployment/layer_influxdb.zip
      Description: InfluxDB Python library
      LayerName: InfluxDB

  PyYamlLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket: collector-deployment-bucket-m1mgfnap
        S3Key: deployment/layer_pyyaml.zip
      Description: PyYaml Python library
      LayerName: PyYaml

  TimerTriggerLambda:
    Type: AWS::Events::Rule
    Properties:
      Description: Timed trigger for starting collector Lambda function
      ScheduleExpression: rate(10 minutes)
      State: DISABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - CollectorFunction
              - Arn
          Id: CollectorFunction

  PermissionInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CollectorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - TimerTriggerLambda
          - Arn

Outputs:
  CollectorServerIP4DNS:
    Value: !GetAtt CollectorServer.PublicDnsName
